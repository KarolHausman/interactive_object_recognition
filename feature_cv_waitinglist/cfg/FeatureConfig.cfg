#!/usr/bin/env python
PACKAGE = "feature_cv_waitinglist"

import roslib;roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator import *

gen = ParameterGenerator()

detectors_enum = gen.enum([ gen.const("SIFT", int_t, 0, "SIFT"),
                  gen.const("SIFTGPU", int_t, 1, "SIFTGPU"),
                  gen.const("SURF", int_t, 2, "SURF"),
                  gen.const("FAST", int_t, 3, "FAST"),
                  gen.const("FAST_grid", int_t, 4, "FAST"),
                  gen.const("MSER", int_t, 5, "MSER"),
                  gen.const("ORB", int_t, 6, "ORB"),
                  gen.const("STAR", int_t, 7, "STAR"),],
                  "Feature Detectors")
gen.add("feature_detector", int_t, 0, "Feature Detector", 0, 0, 6, edit_method=detectors_enum)

extractors_enum = gen.enum([ gen.const("SIFT_", int_t, 0, "SIFT"),
                  gen.const("SIFTGPU_", int_t, 1, "SIFTGPU"),
                  gen.const("SURF_", int_t, 2, "SURF"),
                  gen.const("ORB_", int_t, 3, "ORB"),
                  gen.const("FREAK_", int_t, 4, "FREAK"),
                  gen.const("BRIEF_", int_t, 5, "BRIEF"),],
                  "Feature Extractors")
gen.add("feature_extractor", int_t, 0, "Feature Extractor", 0, 0, 5, edit_method=extractors_enum)

matchers_enum = gen.enum([ gen.const("FLANN", int_t, 0, "FLANN"),
                  gen.const("Bruteforce_Hamming_1", int_t, 1, "Bruteforce_Hamming_1"),
                  gen.const("Bruteforce_Hamming_2", int_t, 2, "Bruteforce_Hamming_2"),
                  gen.const("Bruteforce_L1", int_t, 3, "Bruteforce_L1"),
                  gen.const("Bruteforce_L2", int_t, 4, "Bruteforce_L2"),],
                  "Extractor Matchers")

gen.add("descriptor_matcher", int_t, 0, "Descriptor matcher", 0, 0, 4, edit_method=matchers_enum)

gen.add("feature_detector_parameter_name", str_t, 0, "Enter the name of a algorithm parameter to change", "nFeatures")
gen.add("feature_detector_parameter_value", str_t, 0, "Change the parameter here.  It will automatically be converted to the correct type", "0")

gen.add("feature_extractor_parameter_name", str_t, 0, "Enter the name of a algorithm parameter to change", "nFeatures")
gen.add("feature_extractor_parameter_value", str_t, 0, "Change the parameter here.  It will automatically be converted to the correct type", "0")

gen.add("reduce_search_area", bool_t, 0, "only searches in the same place of the image for a match", True)
gen.add("search_distance", int_t, 0, "number of pixels away from keypoint to search for a match", 1, 1, 150)

gen.add("distinct_matches", bool_t, 0, "enables the following sliders.  Does radius matching (in descriptor distance space) and rejects close or bad matches", True)
gen.add("max_radius_search_dist", double_t, 0, "radius search threshold", .5, 0, 2000)
gen.add("matching_distance_ratio_threshold", double_t, 0, "matching_distance_ratio_threshold", .5, 0, 1)

gen.add("horizontal_matches", bool_t, 0, "Horizontal matches", False)
gen.add("horizontal_threshold", int_t, 0, "Horizontal matches threshold", 1, 0, 100)

gen.add("tracking_matches", bool_t, 0, "Tracking matches", True)
gen.add("drawing_template", bool_t, 0, "Draws two images - one is the template image.", False)
gen.add("retain_all_prev_matches", bool_t, 0, "keep all matches that didn't match from prev frame or discard them", True)
gen.add("double_check_tracking_matches", bool_t, 0, "when matches between current and prev. frame, check both left and right get correct matches based on correspondences in current and prev frames", True)
gen.add("min_tracking_matches", int_t, 0, "Minimum matches to track", 1, 1, 100)
gen.add("tracking_threshold", double_t, 0, "Tracking matches threshold", 0.1, 0, 200)

gen.add("outlier_removal", bool_t, 0, "Remove outliers based on distance to the average match movement distance", True)
gen.add("distance_factor", double_t, 0, "Remove circular matches that are a factor of the average distance between matches", 1.0, 0.0, 3.0)

gen.add("timing_debug", bool_t, 0, "use this get rosinfos for detection, extracting, matching", False)

exit(gen.generate(PACKAGE, "feature_cv_waitinglist", "Feature"))
