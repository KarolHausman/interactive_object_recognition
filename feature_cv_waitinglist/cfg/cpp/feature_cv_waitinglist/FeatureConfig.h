//#line 2 "/opt/ros/fuerte/stacks/dynamic_reconfigure/templates/ConfigType.h"
// *********************************************************
// 
// File autogenerated for the feature_cv_waitinglist package 
// by the dynamic_reconfigure package.
// Please do not edit.
// 
// ********************************************************/

/***********************************************************
 * Software License Agreement (BSD License)
 *
 *  Copyright (c) 2008, Willow Garage, Inc.
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above
 *     copyright notice, this list of conditions and the following
 *     disclaimer in the documentation and/or other materials provided
 *     with the distribution.
 *   * Neither the name of the Willow Garage nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 *  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 *  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 *  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 ***********************************************************/

// Author: Blaise Gassend


#ifndef __feature_cv_waitinglist__FEATURECONFIG_H__
#define __feature_cv_waitinglist__FEATURECONFIG_H__

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace feature_cv_waitinglist
{
  class FeatureConfigStatics;
  
  class FeatureConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l, 
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }
      
      virtual void clamp(FeatureConfig &config, const FeatureConfig &max, const FeatureConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const FeatureConfig &config1, const FeatureConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, FeatureConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const FeatureConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, FeatureConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const FeatureConfig &config) const = 0;
      virtual void getValue(const FeatureConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;
    
    template <class T>
    class ParamDescription : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string name, std::string type, uint32_t level, 
          std::string description, std::string edit_method, T FeatureConfig::* f) :
        AbstractParamDescription(name, type, level, description, edit_method),
        field(f)
      {}

      T (FeatureConfig::* field);

      virtual void clamp(FeatureConfig &config, const FeatureConfig &max, const FeatureConfig &min) const
      {
        if (config.*field > max.*field)
          config.*field = max.*field;
        
        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const FeatureConfig &config1, const FeatureConfig &config2) const
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, FeatureConfig &config) const
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const FeatureConfig &config) const
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, FeatureConfig &config) const
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const FeatureConfig &config) const
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const FeatureConfig &config, boost::any &val) const
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, FeatureConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); i++)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    template<class T, class PT>
    class GroupDescription : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string name, std::string type, int parent, int id, bool s, T PT::* f) : AbstractGroupDescription(name, type, parent, id, s), field(f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;
        
        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); i++) 
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); i++)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }
      
      virtual void updateParams(boost::any &cfg, FeatureConfig &top) const
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); i++) 
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); i++)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T (PT::* field);
      std::vector<FeatureConfig::AbstractGroupDescriptionConstPtr> groups;
    };
    
class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(FeatureConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = params.begin(); i != params.end(); i++)
      {
        boost::any val;
        (*i)->getValue(config, val);

        if("feature_detector"==(*i)->name){feature_detector = boost::any_cast<int>(val);}
        if("feature_extractor"==(*i)->name){feature_extractor = boost::any_cast<int>(val);}
        if("descriptor_matcher"==(*i)->name){descriptor_matcher = boost::any_cast<int>(val);}
        if("feature_detector_parameter_name"==(*i)->name){feature_detector_parameter_name = boost::any_cast<std::string>(val);}
        if("feature_detector_parameter_value"==(*i)->name){feature_detector_parameter_value = boost::any_cast<std::string>(val);}
        if("feature_extractor_parameter_name"==(*i)->name){feature_extractor_parameter_name = boost::any_cast<std::string>(val);}
        if("feature_extractor_parameter_value"==(*i)->name){feature_extractor_parameter_value = boost::any_cast<std::string>(val);}
        if("reduce_search_area"==(*i)->name){reduce_search_area = boost::any_cast<bool>(val);}
        if("search_distance"==(*i)->name){search_distance = boost::any_cast<int>(val);}
        if("distinct_matches"==(*i)->name){distinct_matches = boost::any_cast<bool>(val);}
        if("max_radius_search_dist"==(*i)->name){max_radius_search_dist = boost::any_cast<double>(val);}
        if("matching_distance_ratio_threshold"==(*i)->name){matching_distance_ratio_threshold = boost::any_cast<double>(val);}
        if("horizontal_matches"==(*i)->name){horizontal_matches = boost::any_cast<bool>(val);}
        if("horizontal_threshold"==(*i)->name){horizontal_threshold = boost::any_cast<int>(val);}
        if("tracking_matches"==(*i)->name){tracking_matches = boost::any_cast<bool>(val);}
        if("drawing_template"==(*i)->name){drawing_template = boost::any_cast<bool>(val);}
        if("retain_all_prev_matches"==(*i)->name){retain_all_prev_matches = boost::any_cast<bool>(val);}
        if("double_check_tracking_matches"==(*i)->name){double_check_tracking_matches = boost::any_cast<bool>(val);}
        if("min_tracking_matches"==(*i)->name){min_tracking_matches = boost::any_cast<int>(val);}
        if("tracking_threshold"==(*i)->name){tracking_threshold = boost::any_cast<double>(val);}
        if("outlier_removal"==(*i)->name){outlier_removal = boost::any_cast<bool>(val);}
        if("distance_factor"==(*i)->name){distance_factor = boost::any_cast<double>(val);}
        if("timing_debug"==(*i)->name){timing_debug = boost::any_cast<bool>(val);}
      }
    }

    int feature_detector;
int feature_extractor;
int descriptor_matcher;
std::string feature_detector_parameter_name;
std::string feature_detector_parameter_value;
std::string feature_extractor_parameter_name;
std::string feature_extractor_parameter_value;
bool reduce_search_area;
int search_distance;
bool distinct_matches;
double max_radius_search_dist;
double matching_distance_ratio_threshold;
bool horizontal_matches;
int horizontal_threshold;
bool tracking_matches;
bool drawing_template;
bool retain_all_prev_matches;
bool double_check_tracking_matches;
int min_tracking_matches;
double tracking_threshold;
bool outlier_removal;
double distance_factor;
bool timing_debug;

    bool state;
    std::string name;

    
}groups;



//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      int feature_detector;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      int feature_extractor;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      int descriptor_matcher;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      std::string feature_detector_parameter_name;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      std::string feature_detector_parameter_value;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      std::string feature_extractor_parameter_name;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      std::string feature_extractor_parameter_value;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      bool reduce_search_area;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      int search_distance;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      bool distinct_matches;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      double max_radius_search_dist;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      double matching_distance_ratio_threshold;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      bool horizontal_matches;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      int horizontal_threshold;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      bool tracking_matches;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      bool drawing_template;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      bool retain_all_prev_matches;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      bool double_check_tracking_matches;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      int min_tracking_matches;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      double tracking_threshold;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      bool outlier_removal;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      double distance_factor;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      bool timing_debug;
//#line 255 "/opt/ros/fuerte/stacks/dynamic_reconfigure/templates/ConfigType.h"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("FeatureConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }
    
    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }
    
    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const FeatureConfig &__max__ = __getMax__();
      const FeatureConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const FeatureConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        (*i)->calcLevel(level, config, *this);
      return level;
    }
    
    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const FeatureConfig &__getDefault__();
    static const FeatureConfig &__getMax__();
    static const FeatureConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();
    
  private:
    static const FeatureConfigStatics *__get_statics__();
  };
  
  template <> // Max and min are ignored for strings.
  inline void FeatureConfig::ParamDescription<std::string>::clamp(FeatureConfig &config, const FeatureConfig &max, const FeatureConfig &min) const
  {
    return;
  }

  class FeatureConfigStatics
  {
    friend class FeatureConfig;
    
    FeatureConfigStatics()
    {
FeatureConfig::GroupDescription<FeatureConfig::DEFAULT, FeatureConfig> Default("Default", "", 0, 0, true, &FeatureConfig::groups);
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __min__.feature_detector = 0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __max__.feature_detector = 6;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __default__.feature_detector = 0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(FeatureConfig::AbstractParamDescriptionConstPtr(new FeatureConfig::ParamDescription<int>("feature_detector", "int", 0, "Feature Detector", "{'enum_description': 'Feature Detectors', 'enum': [{'srcline': 10, 'description': 'SIFT', 'srcfile': 'cfg/FeatureConfig.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'SIFT'}, {'srcline': 11, 'description': 'SIFTGPU', 'srcfile': 'cfg/FeatureConfig.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'SIFTGPU'}, {'srcline': 12, 'description': 'SURF', 'srcfile': 'cfg/FeatureConfig.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'SURF'}, {'srcline': 13, 'description': 'FAST', 'srcfile': 'cfg/FeatureConfig.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': 'FAST'}, {'srcline': 14, 'description': 'FAST', 'srcfile': 'cfg/FeatureConfig.cfg', 'cconsttype': 'const int', 'value': 4, 'ctype': 'int', 'type': 'int', 'name': 'FAST_grid'}, {'srcline': 15, 'description': 'MSER', 'srcfile': 'cfg/FeatureConfig.cfg', 'cconsttype': 'const int', 'value': 5, 'ctype': 'int', 'type': 'int', 'name': 'MSER'}, {'srcline': 16, 'description': 'ORB', 'srcfile': 'cfg/FeatureConfig.cfg', 'cconsttype': 'const int', 'value': 6, 'ctype': 'int', 'type': 'int', 'name': 'ORB'}, {'srcline': 17, 'description': 'STAR', 'srcfile': 'cfg/FeatureConfig.cfg', 'cconsttype': 'const int', 'value': 7, 'ctype': 'int', 'type': 'int', 'name': 'STAR'}]}", &FeatureConfig::feature_detector)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(FeatureConfig::AbstractParamDescriptionConstPtr(new FeatureConfig::ParamDescription<int>("feature_detector", "int", 0, "Feature Detector", "{'enum_description': 'Feature Detectors', 'enum': [{'srcline': 10, 'description': 'SIFT', 'srcfile': 'cfg/FeatureConfig.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'SIFT'}, {'srcline': 11, 'description': 'SIFTGPU', 'srcfile': 'cfg/FeatureConfig.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'SIFTGPU'}, {'srcline': 12, 'description': 'SURF', 'srcfile': 'cfg/FeatureConfig.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'SURF'}, {'srcline': 13, 'description': 'FAST', 'srcfile': 'cfg/FeatureConfig.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': 'FAST'}, {'srcline': 14, 'description': 'FAST', 'srcfile': 'cfg/FeatureConfig.cfg', 'cconsttype': 'const int', 'value': 4, 'ctype': 'int', 'type': 'int', 'name': 'FAST_grid'}, {'srcline': 15, 'description': 'MSER', 'srcfile': 'cfg/FeatureConfig.cfg', 'cconsttype': 'const int', 'value': 5, 'ctype': 'int', 'type': 'int', 'name': 'MSER'}, {'srcline': 16, 'description': 'ORB', 'srcfile': 'cfg/FeatureConfig.cfg', 'cconsttype': 'const int', 'value': 6, 'ctype': 'int', 'type': 'int', 'name': 'ORB'}, {'srcline': 17, 'description': 'STAR', 'srcfile': 'cfg/FeatureConfig.cfg', 'cconsttype': 'const int', 'value': 7, 'ctype': 'int', 'type': 'int', 'name': 'STAR'}]}", &FeatureConfig::feature_detector)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __min__.feature_extractor = 0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __max__.feature_extractor = 5;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __default__.feature_extractor = 0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(FeatureConfig::AbstractParamDescriptionConstPtr(new FeatureConfig::ParamDescription<int>("feature_extractor", "int", 0, "Feature Extractor", "{'enum_description': 'Feature Extractors', 'enum': [{'srcline': 21, 'description': 'SIFT', 'srcfile': 'cfg/FeatureConfig.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'SIFT_'}, {'srcline': 22, 'description': 'SIFTGPU', 'srcfile': 'cfg/FeatureConfig.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'SIFTGPU_'}, {'srcline': 23, 'description': 'SURF', 'srcfile': 'cfg/FeatureConfig.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'SURF_'}, {'srcline': 24, 'description': 'ORB', 'srcfile': 'cfg/FeatureConfig.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': 'ORB_'}, {'srcline': 25, 'description': 'FREAK', 'srcfile': 'cfg/FeatureConfig.cfg', 'cconsttype': 'const int', 'value': 4, 'ctype': 'int', 'type': 'int', 'name': 'FREAK_'}, {'srcline': 26, 'description': 'BRIEF', 'srcfile': 'cfg/FeatureConfig.cfg', 'cconsttype': 'const int', 'value': 5, 'ctype': 'int', 'type': 'int', 'name': 'BRIEF_'}]}", &FeatureConfig::feature_extractor)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(FeatureConfig::AbstractParamDescriptionConstPtr(new FeatureConfig::ParamDescription<int>("feature_extractor", "int", 0, "Feature Extractor", "{'enum_description': 'Feature Extractors', 'enum': [{'srcline': 21, 'description': 'SIFT', 'srcfile': 'cfg/FeatureConfig.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'SIFT_'}, {'srcline': 22, 'description': 'SIFTGPU', 'srcfile': 'cfg/FeatureConfig.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'SIFTGPU_'}, {'srcline': 23, 'description': 'SURF', 'srcfile': 'cfg/FeatureConfig.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'SURF_'}, {'srcline': 24, 'description': 'ORB', 'srcfile': 'cfg/FeatureConfig.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': 'ORB_'}, {'srcline': 25, 'description': 'FREAK', 'srcfile': 'cfg/FeatureConfig.cfg', 'cconsttype': 'const int', 'value': 4, 'ctype': 'int', 'type': 'int', 'name': 'FREAK_'}, {'srcline': 26, 'description': 'BRIEF', 'srcfile': 'cfg/FeatureConfig.cfg', 'cconsttype': 'const int', 'value': 5, 'ctype': 'int', 'type': 'int', 'name': 'BRIEF_'}]}", &FeatureConfig::feature_extractor)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __min__.descriptor_matcher = 0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __max__.descriptor_matcher = 4;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __default__.descriptor_matcher = 0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(FeatureConfig::AbstractParamDescriptionConstPtr(new FeatureConfig::ParamDescription<int>("descriptor_matcher", "int", 0, "Descriptor matcher", "{'enum_description': 'Extractor Matchers', 'enum': [{'srcline': 30, 'description': 'FLANN', 'srcfile': 'cfg/FeatureConfig.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'FLANN'}, {'srcline': 31, 'description': 'Bruteforce_Hamming_1', 'srcfile': 'cfg/FeatureConfig.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'Bruteforce_Hamming_1'}, {'srcline': 32, 'description': 'Bruteforce_Hamming_2', 'srcfile': 'cfg/FeatureConfig.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'Bruteforce_Hamming_2'}, {'srcline': 33, 'description': 'Bruteforce_L1', 'srcfile': 'cfg/FeatureConfig.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': 'Bruteforce_L1'}, {'srcline': 34, 'description': 'Bruteforce_L2', 'srcfile': 'cfg/FeatureConfig.cfg', 'cconsttype': 'const int', 'value': 4, 'ctype': 'int', 'type': 'int', 'name': 'Bruteforce_L2'}]}", &FeatureConfig::descriptor_matcher)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(FeatureConfig::AbstractParamDescriptionConstPtr(new FeatureConfig::ParamDescription<int>("descriptor_matcher", "int", 0, "Descriptor matcher", "{'enum_description': 'Extractor Matchers', 'enum': [{'srcline': 30, 'description': 'FLANN', 'srcfile': 'cfg/FeatureConfig.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'FLANN'}, {'srcline': 31, 'description': 'Bruteforce_Hamming_1', 'srcfile': 'cfg/FeatureConfig.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'Bruteforce_Hamming_1'}, {'srcline': 32, 'description': 'Bruteforce_Hamming_2', 'srcfile': 'cfg/FeatureConfig.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'Bruteforce_Hamming_2'}, {'srcline': 33, 'description': 'Bruteforce_L1', 'srcfile': 'cfg/FeatureConfig.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': 'Bruteforce_L1'}, {'srcline': 34, 'description': 'Bruteforce_L2', 'srcfile': 'cfg/FeatureConfig.cfg', 'cconsttype': 'const int', 'value': 4, 'ctype': 'int', 'type': 'int', 'name': 'Bruteforce_L2'}]}", &FeatureConfig::descriptor_matcher)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __min__.feature_detector_parameter_name = "";
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __max__.feature_detector_parameter_name = "";
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __default__.feature_detector_parameter_name = "nFeatures";
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(FeatureConfig::AbstractParamDescriptionConstPtr(new FeatureConfig::ParamDescription<std::string>("feature_detector_parameter_name", "str", 0, "Enter the name of a algorithm parameter to change", "", &FeatureConfig::feature_detector_parameter_name)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(FeatureConfig::AbstractParamDescriptionConstPtr(new FeatureConfig::ParamDescription<std::string>("feature_detector_parameter_name", "str", 0, "Enter the name of a algorithm parameter to change", "", &FeatureConfig::feature_detector_parameter_name)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __min__.feature_detector_parameter_value = "";
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __max__.feature_detector_parameter_value = "";
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __default__.feature_detector_parameter_value = "0";
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(FeatureConfig::AbstractParamDescriptionConstPtr(new FeatureConfig::ParamDescription<std::string>("feature_detector_parameter_value", "str", 0, "Change the parameter here.  It will automatically be converted to the correct type", "", &FeatureConfig::feature_detector_parameter_value)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(FeatureConfig::AbstractParamDescriptionConstPtr(new FeatureConfig::ParamDescription<std::string>("feature_detector_parameter_value", "str", 0, "Change the parameter here.  It will automatically be converted to the correct type", "", &FeatureConfig::feature_detector_parameter_value)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __min__.feature_extractor_parameter_name = "";
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __max__.feature_extractor_parameter_name = "";
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __default__.feature_extractor_parameter_name = "nFeatures";
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(FeatureConfig::AbstractParamDescriptionConstPtr(new FeatureConfig::ParamDescription<std::string>("feature_extractor_parameter_name", "str", 0, "Enter the name of a algorithm parameter to change", "", &FeatureConfig::feature_extractor_parameter_name)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(FeatureConfig::AbstractParamDescriptionConstPtr(new FeatureConfig::ParamDescription<std::string>("feature_extractor_parameter_name", "str", 0, "Enter the name of a algorithm parameter to change", "", &FeatureConfig::feature_extractor_parameter_name)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __min__.feature_extractor_parameter_value = "";
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __max__.feature_extractor_parameter_value = "";
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __default__.feature_extractor_parameter_value = "0";
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(FeatureConfig::AbstractParamDescriptionConstPtr(new FeatureConfig::ParamDescription<std::string>("feature_extractor_parameter_value", "str", 0, "Change the parameter here.  It will automatically be converted to the correct type", "", &FeatureConfig::feature_extractor_parameter_value)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(FeatureConfig::AbstractParamDescriptionConstPtr(new FeatureConfig::ParamDescription<std::string>("feature_extractor_parameter_value", "str", 0, "Change the parameter here.  It will automatically be converted to the correct type", "", &FeatureConfig::feature_extractor_parameter_value)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __min__.reduce_search_area = 0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __max__.reduce_search_area = 1;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __default__.reduce_search_area = 1;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(FeatureConfig::AbstractParamDescriptionConstPtr(new FeatureConfig::ParamDescription<bool>("reduce_search_area", "bool", 0, "only searches in the same place of the image for a match", "", &FeatureConfig::reduce_search_area)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(FeatureConfig::AbstractParamDescriptionConstPtr(new FeatureConfig::ParamDescription<bool>("reduce_search_area", "bool", 0, "only searches in the same place of the image for a match", "", &FeatureConfig::reduce_search_area)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __min__.search_distance = 1;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __max__.search_distance = 150;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __default__.search_distance = 1;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(FeatureConfig::AbstractParamDescriptionConstPtr(new FeatureConfig::ParamDescription<int>("search_distance", "int", 0, "number of pixels away from keypoint to search for a match", "", &FeatureConfig::search_distance)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(FeatureConfig::AbstractParamDescriptionConstPtr(new FeatureConfig::ParamDescription<int>("search_distance", "int", 0, "number of pixels away from keypoint to search for a match", "", &FeatureConfig::search_distance)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __min__.distinct_matches = 0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __max__.distinct_matches = 1;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __default__.distinct_matches = 1;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(FeatureConfig::AbstractParamDescriptionConstPtr(new FeatureConfig::ParamDescription<bool>("distinct_matches", "bool", 0, "enables the following sliders.  Does radius matching (in descriptor distance space) and rejects close or bad matches", "", &FeatureConfig::distinct_matches)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(FeatureConfig::AbstractParamDescriptionConstPtr(new FeatureConfig::ParamDescription<bool>("distinct_matches", "bool", 0, "enables the following sliders.  Does radius matching (in descriptor distance space) and rejects close or bad matches", "", &FeatureConfig::distinct_matches)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __min__.max_radius_search_dist = 0.0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __max__.max_radius_search_dist = 2000.0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __default__.max_radius_search_dist = 0.5;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(FeatureConfig::AbstractParamDescriptionConstPtr(new FeatureConfig::ParamDescription<double>("max_radius_search_dist", "double", 0, "radius search threshold", "", &FeatureConfig::max_radius_search_dist)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(FeatureConfig::AbstractParamDescriptionConstPtr(new FeatureConfig::ParamDescription<double>("max_radius_search_dist", "double", 0, "radius search threshold", "", &FeatureConfig::max_radius_search_dist)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __min__.matching_distance_ratio_threshold = 0.0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __max__.matching_distance_ratio_threshold = 1.0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __default__.matching_distance_ratio_threshold = 0.5;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(FeatureConfig::AbstractParamDescriptionConstPtr(new FeatureConfig::ParamDescription<double>("matching_distance_ratio_threshold", "double", 0, "matching_distance_ratio_threshold", "", &FeatureConfig::matching_distance_ratio_threshold)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(FeatureConfig::AbstractParamDescriptionConstPtr(new FeatureConfig::ParamDescription<double>("matching_distance_ratio_threshold", "double", 0, "matching_distance_ratio_threshold", "", &FeatureConfig::matching_distance_ratio_threshold)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __min__.horizontal_matches = 0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __max__.horizontal_matches = 1;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __default__.horizontal_matches = 0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(FeatureConfig::AbstractParamDescriptionConstPtr(new FeatureConfig::ParamDescription<bool>("horizontal_matches", "bool", 0, "Horizontal matches", "", &FeatureConfig::horizontal_matches)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(FeatureConfig::AbstractParamDescriptionConstPtr(new FeatureConfig::ParamDescription<bool>("horizontal_matches", "bool", 0, "Horizontal matches", "", &FeatureConfig::horizontal_matches)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __min__.horizontal_threshold = 0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __max__.horizontal_threshold = 100;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __default__.horizontal_threshold = 1;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(FeatureConfig::AbstractParamDescriptionConstPtr(new FeatureConfig::ParamDescription<int>("horizontal_threshold", "int", 0, "Horizontal matches threshold", "", &FeatureConfig::horizontal_threshold)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(FeatureConfig::AbstractParamDescriptionConstPtr(new FeatureConfig::ParamDescription<int>("horizontal_threshold", "int", 0, "Horizontal matches threshold", "", &FeatureConfig::horizontal_threshold)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __min__.tracking_matches = 0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __max__.tracking_matches = 1;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __default__.tracking_matches = 1;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(FeatureConfig::AbstractParamDescriptionConstPtr(new FeatureConfig::ParamDescription<bool>("tracking_matches", "bool", 0, "Tracking matches", "", &FeatureConfig::tracking_matches)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(FeatureConfig::AbstractParamDescriptionConstPtr(new FeatureConfig::ParamDescription<bool>("tracking_matches", "bool", 0, "Tracking matches", "", &FeatureConfig::tracking_matches)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __min__.drawing_template = 0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __max__.drawing_template = 1;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __default__.drawing_template = 0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(FeatureConfig::AbstractParamDescriptionConstPtr(new FeatureConfig::ParamDescription<bool>("drawing_template", "bool", 0, "Draws two images - one is the template image.", "", &FeatureConfig::drawing_template)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(FeatureConfig::AbstractParamDescriptionConstPtr(new FeatureConfig::ParamDescription<bool>("drawing_template", "bool", 0, "Draws two images - one is the template image.", "", &FeatureConfig::drawing_template)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __min__.retain_all_prev_matches = 0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __max__.retain_all_prev_matches = 1;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __default__.retain_all_prev_matches = 1;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(FeatureConfig::AbstractParamDescriptionConstPtr(new FeatureConfig::ParamDescription<bool>("retain_all_prev_matches", "bool", 0, "keep all matches that didn't match from prev frame or discard them", "", &FeatureConfig::retain_all_prev_matches)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(FeatureConfig::AbstractParamDescriptionConstPtr(new FeatureConfig::ParamDescription<bool>("retain_all_prev_matches", "bool", 0, "keep all matches that didn't match from prev frame or discard them", "", &FeatureConfig::retain_all_prev_matches)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __min__.double_check_tracking_matches = 0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __max__.double_check_tracking_matches = 1;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __default__.double_check_tracking_matches = 1;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(FeatureConfig::AbstractParamDescriptionConstPtr(new FeatureConfig::ParamDescription<bool>("double_check_tracking_matches", "bool", 0, "when matches between current and prev. frame, check both left and right get correct matches based on correspondences in current and prev frames", "", &FeatureConfig::double_check_tracking_matches)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(FeatureConfig::AbstractParamDescriptionConstPtr(new FeatureConfig::ParamDescription<bool>("double_check_tracking_matches", "bool", 0, "when matches between current and prev. frame, check both left and right get correct matches based on correspondences in current and prev frames", "", &FeatureConfig::double_check_tracking_matches)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __min__.min_tracking_matches = 1;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __max__.min_tracking_matches = 100;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __default__.min_tracking_matches = 1;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(FeatureConfig::AbstractParamDescriptionConstPtr(new FeatureConfig::ParamDescription<int>("min_tracking_matches", "int", 0, "Minimum matches to track", "", &FeatureConfig::min_tracking_matches)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(FeatureConfig::AbstractParamDescriptionConstPtr(new FeatureConfig::ParamDescription<int>("min_tracking_matches", "int", 0, "Minimum matches to track", "", &FeatureConfig::min_tracking_matches)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __min__.tracking_threshold = 0.0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __max__.tracking_threshold = 200.0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __default__.tracking_threshold = 0.1;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(FeatureConfig::AbstractParamDescriptionConstPtr(new FeatureConfig::ParamDescription<double>("tracking_threshold", "double", 0, "Tracking matches threshold", "", &FeatureConfig::tracking_threshold)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(FeatureConfig::AbstractParamDescriptionConstPtr(new FeatureConfig::ParamDescription<double>("tracking_threshold", "double", 0, "Tracking matches threshold", "", &FeatureConfig::tracking_threshold)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __min__.outlier_removal = 0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __max__.outlier_removal = 1;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __default__.outlier_removal = 1;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(FeatureConfig::AbstractParamDescriptionConstPtr(new FeatureConfig::ParamDescription<bool>("outlier_removal", "bool", 0, "Remove outliers based on distance to the average match movement distance", "", &FeatureConfig::outlier_removal)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(FeatureConfig::AbstractParamDescriptionConstPtr(new FeatureConfig::ParamDescription<bool>("outlier_removal", "bool", 0, "Remove outliers based on distance to the average match movement distance", "", &FeatureConfig::outlier_removal)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __min__.distance_factor = 0.0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __max__.distance_factor = 3.0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __default__.distance_factor = 1.0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(FeatureConfig::AbstractParamDescriptionConstPtr(new FeatureConfig::ParamDescription<double>("distance_factor", "double", 0, "Remove circular matches that are a factor of the average distance between matches", "", &FeatureConfig::distance_factor)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(FeatureConfig::AbstractParamDescriptionConstPtr(new FeatureConfig::ParamDescription<double>("distance_factor", "double", 0, "Remove circular matches that are a factor of the average distance between matches", "", &FeatureConfig::distance_factor)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __min__.timing_debug = 0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __max__.timing_debug = 1;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __default__.timing_debug = 0;
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      Default.abstract_parameters.push_back(FeatureConfig::AbstractParamDescriptionConstPtr(new FeatureConfig::ParamDescription<bool>("timing_debug", "bool", 0, "use this get rosinfos for detection, extracting, matching", "", &FeatureConfig::timing_debug)));
//#line 259 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __param_descriptions__.push_back(FeatureConfig::AbstractParamDescriptionConstPtr(new FeatureConfig::ParamDescription<bool>("timing_debug", "bool", 0, "use this get rosinfos for detection, extracting, matching", "", &FeatureConfig::timing_debug)));
//#line 233 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      Default.convertParams();
//#line 233 "/opt/ros/fuerte/stacks/dynamic_reconfigure/src/dynamic_reconfigure/parameter_generator.py"
      __group_descriptions__.push_back(FeatureConfig::AbstractGroupDescriptionConstPtr(new FeatureConfig::GroupDescription<FeatureConfig::DEFAULT, FeatureConfig>(Default)));
//#line 390 "/opt/ros/fuerte/stacks/dynamic_reconfigure/templates/ConfigType.h"
    
      for (std::vector<FeatureConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__); 
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__); 
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__); 
    }
    std::vector<FeatureConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<FeatureConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    FeatureConfig __max__;
    FeatureConfig __min__;
    FeatureConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const FeatureConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static FeatureConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &FeatureConfig::__getDescriptionMessage__() 
  {
    return __get_statics__()->__description_message__;
  }

  inline const FeatureConfig &FeatureConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }
  
  inline const FeatureConfig &FeatureConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }
  
  inline const FeatureConfig &FeatureConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }
  
  inline const std::vector<FeatureConfig::AbstractParamDescriptionConstPtr> &FeatureConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<FeatureConfig::AbstractGroupDescriptionConstPtr> &FeatureConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const FeatureConfigStatics *FeatureConfig::__get_statics__()
  {
    const static FeatureConfigStatics *statics;
  
    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = FeatureConfigStatics::get_instance();
    
    return statics;
  }

//#line 10 "cfg/FeatureConfig.cfg"
      const int Feature_SIFT = 0;
//#line 11 "cfg/FeatureConfig.cfg"
      const int Feature_SIFTGPU = 1;
//#line 12 "cfg/FeatureConfig.cfg"
      const int Feature_SURF = 2;
//#line 13 "cfg/FeatureConfig.cfg"
      const int Feature_FAST = 3;
//#line 14 "cfg/FeatureConfig.cfg"
      const int Feature_FAST_grid = 4;
//#line 15 "cfg/FeatureConfig.cfg"
      const int Feature_MSER = 5;
//#line 16 "cfg/FeatureConfig.cfg"
      const int Feature_ORB = 6;
//#line 17 "cfg/FeatureConfig.cfg"
      const int Feature_STAR = 7;
//#line 21 "cfg/FeatureConfig.cfg"
      const int Feature_SIFT_ = 0;
//#line 22 "cfg/FeatureConfig.cfg"
      const int Feature_SIFTGPU_ = 1;
//#line 23 "cfg/FeatureConfig.cfg"
      const int Feature_SURF_ = 2;
//#line 24 "cfg/FeatureConfig.cfg"
      const int Feature_ORB_ = 3;
//#line 25 "cfg/FeatureConfig.cfg"
      const int Feature_FREAK_ = 4;
//#line 26 "cfg/FeatureConfig.cfg"
      const int Feature_BRIEF_ = 5;
//#line 30 "cfg/FeatureConfig.cfg"
      const int Feature_FLANN = 0;
//#line 31 "cfg/FeatureConfig.cfg"
      const int Feature_Bruteforce_Hamming_1 = 1;
//#line 32 "cfg/FeatureConfig.cfg"
      const int Feature_Bruteforce_Hamming_2 = 2;
//#line 33 "cfg/FeatureConfig.cfg"
      const int Feature_Bruteforce_L1 = 3;
//#line 34 "cfg/FeatureConfig.cfg"
      const int Feature_Bruteforce_L2 = 4;
}

#endif // __FEATURERECONFIGURATOR_H__
